

openapi: 3.0.3
info:
  title: WaSa Sapienza  - OpenAPI 3.0
  description: |-
    This is a project for a web application 
  termsOfService: http://swagger.io/terms/
  version: 0.0.1
tags:
  - name: login
    description: the login
  - name: user
    description: Everything about the users
  - name: photo
    description: Everything about the fotos
  - name: like
    description: Everything about likes
  - name: comment
    description: Everything about comments
  - name: search
    description: Everything about the search operation
  - name: stream
    description: The stream homepage

#==========================================================================================================
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
               type: object
               properties:
                  identifier: 
                    type: string
                    example: "abcdef012345"
#==========================================================================================================
              
  /user/{id}:
    put:
      tags:
        - user
      summary: Set my username
      description: The user can set your own username
      operationId: setMyUserName
      parameters:
        - $ref: '#/components/parameters/user_id'      
        - $ref: '#/components/parameters/username'   
      
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/users' 
        '400':
             $ref: '#/components/responses/Invalid_ID_supplied'
        '401':
              $ref: '#/components/responses/Unauthorized'
        '403':
              $ref: '#/components/responses/Forbidden'
        '404':
              $ref: '#/components/responses/Not_Found'
        '422':
              $ref: '#/components/responses/Unprocessable_Entity'
        '500':
              $ref: '#/components/responses/Internal_Server_Error'
      
      security:
        - bearerAuth: [] 

#==========================================================================================================
          
    
    get:
      tags: 
        - search
      summary: Get a profile 
      description: The user can see a user Profile of onther User (if the user isn´t banned)
      operationId: getUserProfile
      parameters:
        -  $ref: '#/components/parameters/user_id'      
        -  $ref: '#/components/parameters/username'
        
      responses:
       '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/UserProfile' 
       '400':
            $ref: '#/components/responses/Invalid_ID_supplied'
       '401':
            $ref: '#/components/responses/Unauthorized'
       '403':
            $ref: '#/components/responses/Forbidden'
       '404':
            $ref: '#/components/responses/Not_Found'
       '422':
            $ref: '#/components/responses/Unprocessable_Entity'
       '500':
            $ref: '#/components/responses/Internal_Server_Error'
          
      security:
        - bearerAuth: [] 
#==========================================================================================================
          
  /user/{id}/UploadPhoto:
    post:
      tags:
        - photo
      summary: Upload a new foto
      operationId: uploadPhoto
      parameters:
      -  $ref: '#/components/parameters/user_id'      
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/raw_photo'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/photos' 
        '400':
             $ref: '#/components/responses/Invalid_ID_supplied'
        '401':
              $ref: '#/components/responses/Unauthorized'
        '403':
              $ref: '#/components/responses/Forbidden'
        '404':
              $ref: '#/components/responses/Not_Found'
        '422':
              $ref: '#/components/responses/Unprocessable_Entity'
        '500':
              $ref: '#/components/responses/Internal_Server_Error'
          
      security:
        - bearerAuth: [] 
          
#==========================================================================================================        
    
  /user/{id}/photos/{idPhoto}: 
      
      get:
        tags:
         - photo
        summary: A user can access a photo if he/she's the owner or if he/she wasn't banned by the owner
        operationId: getPhoto
        parameters:
           -  $ref: '#/components/parameters/user_id'      
           -  $ref: '#/components/parameters/photo_id' 
        responses:
           '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/photos' 
           '400':
              $ref: '#/components/responses/Invalid_ID_supplied'
           '401':
               $ref: '#/components/responses/Unauthorized'
           '403':
              $ref: '#/components/responses/Forbidden'
           '404':
              $ref: '#/components/responses/Not_Found'
           '422':
              $ref: '#/components/responses/Unprocessable_Entity'
           '500':
              $ref: '#/components/responses/Internal_Server_Error'
        
        security:
          - bearerAuth: [] 
      
      
      delete:
        tags:
          - photo
        summary: Delete a Photo
        operationId: deletePhoto
        parameters:
          -  $ref: '#/components/parameters/user_id'      
          -  $ref: '#/components/parameters/photo_id' 
        responses:
          '200':
              $ref: '#/components/responses/success'
          '400':
              $ref: '#/components/responses/Invalid_ID_supplied'
          '401':
               $ref: '#/components/responses/Unauthorized'
          '403':
              $ref: '#/components/responses/Forbidden'
          '404':
              $ref: '#/components/responses/Not_Found'
          '422':
              $ref: '#/components/responses/Unprocessable_Entity'
          '500':
              $ref: '#/components/responses/Internal_Server_Error'
    
        security:
         - bearerAuth: [] 
            
#==========================================================================================================
  
  /user/{id}/followers/{follower_id}:
    post:
      tags:
       - user
      summary: Follow a new user
      description: Another user is followed by the user of the path
      operationId: followUser
      parameters:
        -   $ref: '#/components/parameters/user_id' 
        -   $ref: '#/components/parameters/follower_id'  
      responses:
          '200':
              $ref: '#/components/responses/success'
          '400':
              $ref: '#/components/responses/Invalid_ID_supplied'
          '401':
               $ref: '#/components/responses/Unauthorized'
          '403':
              $ref: '#/components/responses/Forbidden'
          '404':
              $ref: '#/components/responses/Not_Found'
          '422':
              $ref: '#/components/responses/Unprocessable_Entity'
          '500':
              $ref: '#/components/responses/Internal_Server_Error'
  
      security:
        - bearerAuth: [] 
    
    delete:
      tags:
        - user
      summary: Defollow a user
      description: You delete a specific user from your following list
      operationId: unfollowUser
      parameters:
        -   $ref: '#/components/parameters/user_id'
        -   $ref: '#/components/parameters/follower_id' 
      responses:
          '200':
              $ref: '#/components/responses/success'
          '400':
              $ref: '#/components/responses/Invalid_ID_supplied'
          '401':
               $ref: '#/components/responses/Unauthorized'
          '403':
              $ref: '#/components/responses/Forbidden'
          '404':
              $ref: '#/components/responses/Not_Found'
          '422':
              $ref: '#/components/responses/Unprocessable_Entity'
          '500':
              $ref: '#/components/responses/Internal_Server_Error'
      
      security:
        - bearerAuth: [] 
 #==========================================================================================================
 
  /user/{id}/ban/{ban_id}:
    post:
      tags:
        - user
      summary: ban a new user
      description: A user can ban onther user
      operationId: banUser
      parameters:
      -   $ref: '#/components/parameters/user_id'
      -   $ref: '#/components/parameters/ban_id'
      responses:
          '200':
              $ref: '#/components/responses/success'
          '400':
              $ref: '#/components/responses/Invalid_ID_supplied'
          '401':
               $ref: '#/components/responses/Unauthorized'
          '403':
              $ref: '#/components/responses/Forbidden'
          '404':
              $ref: '#/components/responses/Not_Found'
          '422':
              $ref: '#/components/responses/Unprocessable_Entity'
          '500':
              $ref: '#/components/responses/Internal_Server_Error'
      
      security:
        - bearerAuth: [] 
    
    delete:
      tags:
        - user
      summary: Unban a user
      description: You delete a specific user from your banned list
      operationId: unbanUser
      parameters:
      -   $ref: '#/components/parameters/user_id'
      -   $ref: '#/components/parameters/ban_id'
      responses:
          '200':
              $ref: '#/components/responses/success'
          '400':
              $ref: '#/components/responses/Invalid_ID_supplied'
          '401':
               $ref: '#/components/responses/Unauthorized'
          '403':
              $ref: '#/components/responses/Forbidden'
          '404':
              $ref: '#/components/responses/Not_Found'
          '422':
              $ref: '#/components/responses/Unprocessable_Entity'
          '500':
              $ref: '#/components/responses/Internal_Server_Error'
      
      security:
        - bearerAuth: [] 
 #==========================================================================================================


  /user/{id}/home:
    get:
      tags: 
        - stream
      summary: Get a stream 
      description: The user gets a stream of photos
      operationId: getMyStream
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/stream' 
        '400':
              $ref: '#/components/responses/Invalid_ID_supplied'
        '401':
               $ref: '#/components/responses/Unauthorized'
        '403':
              $ref: '#/components/responses/Forbidden'
        '404':
              $ref: '#/components/responses/Not_Found'
        '422':
              $ref: '#/components/responses/Unprocessable_Entity'
        '500':
              $ref: '#/components/responses/Internal_Server_Error'
  
      security:
        - bearerAuth: [] 
 #==========================================================================================================
 
 

   
    
  /user/{id}/photos/{idPhoto}/likes:
      post:
        tags:
          - like
        summary: like a Photo
        description: The user can like another photo
        operationId: likePhoto
        parameters:
          - $ref: '#/components/parameters/user_id'
          - $ref: '#/components/parameters/photo_id'
        responses:
            '200':
              description: Successful operation
              content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/photos'             
            '400':
              $ref: '#/components/responses/Invalid_ID_supplied'
            '401':
               $ref: '#/components/responses/Unauthorized'
            '403':
              $ref: '#/components/responses/Forbidden'
            '404':
              $ref: '#/components/responses/Not_Found'
            '422':
              $ref: '#/components/responses/Unprocessable_Entity'
            '500':
              $ref: '#/components/responses/Internal_Server_Error'
    
        security:
        - bearerAuth: [] 

      delete:
        tags:
          - like
        summary: unlike a Photo
        operationId: unlikePhoto
        parameters:
          - $ref: '#/components/parameters/user_id'
          - $ref: '#/components/parameters/photo_id'

        responses:
            '200':
              description: Successful operation
              content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/photos'             
            '400':
              $ref: '#/components/responses/Invalid_ID_supplied'
            '401':
               $ref: '#/components/responses/Unauthorized'
            '403':
              $ref: '#/components/responses/Forbidden'
            '404':
              $ref: '#/components/responses/Not_Found'
            '422':
              $ref: '#/components/responses/Unprocessable_Entity'
            '500':
              $ref: '#/components/responses/Internal_Server_Error'
        
        security:
        - bearerAuth: [] 

 #==========================================================================================================
  
  /user/{id}/photos/{idPhoto}/comment:
      post:
        tags:
          - comment
        summary: comment a Photo
        operationId: commentPhoto
        parameters:
          - $ref: '#/components/parameters/user_id'
          - $ref: '#/components/parameters/photo_id'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/photo_comment'
        responses:
            '200':
              description: Successful operation
              content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/photos'             
            '400':
              $ref: '#/components/responses/Invalid_ID_supplied'
            '401':
               $ref: '#/components/responses/Unauthorized'
            '403':
              $ref: '#/components/responses/Forbidden'
            '404':
              $ref: '#/components/responses/Not_Found'
            '422':
              $ref: '#/components/responses/Unprocessable_Entity'
            '500':
              $ref: '#/components/responses/Internal_Server_Error'
        
        security:
        - bearerAuth: [] 
  
  
  /user/{id}/photos/{idPhoto}/comment/{idComment}:      
      delete:
        tags:
          - comment
        summary: delete a comment of a Photo
        operationId: uncommentPhoto
        parameters:
          - $ref: '#/components/parameters/user_id'
          - $ref: '#/components/parameters/photo_id'
          - $ref: '#/components/parameters/comment_id'
        responses:
            '200':
              description: Successful operation
              content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/photos'             
            '400':
              $ref: '#/components/responses/Invalid_ID_supplied'
            '401':
               $ref: '#/components/responses/Unauthorized'
            '403':
              $ref: '#/components/responses/Forbidden'
            '404':
              $ref: '#/components/responses/Not_Found'
            '422':
              $ref: '#/components/responses/Unprocessable_Entity'
            '500':
              $ref: '#/components/responses/Internal_Server_Error'
              
        security:
        - bearerAuth: [] 
  
  
  
#____________________________________________________________________________________________________________________________________ 
  

components:
  
  parameters:
    
    user_id:
         name: id
         in: path
         description: the id of the user who want to delete the photo
         required: true
         schema:
           type: integer
           example: 23
 #==========================================================================================================
      
    follower_id:
         name: follower_id
         in: path
         description: the id of the user who we want to follow/defollow
         required: true
         schema:
           type: integer
           example: 23 
   #==========================================================================================================

    ban_id:
         name: ban_id
         in: path
         description: the id of the user who we want to follow/defollow
         required: true
         schema:
           type: integer
           example: 23     
    #========================================================================================================== 

    username:
          name: newName
          in: query
          description: the new name to set
          required: true
          schema:
              description: String between 3-16 characters
              type: string
              pattern: '^[a-zA-Z0-9]+$'
              example: "Mangione82"
              minLength: 3
              maxLength: 16
              readOnly: true
     #==========================================================================================================

    photo_id:
      name: idPhoto
      in: path
      description: the photo that must to be deleted
      required: true
      schema:
          type: integer
          example: 51
   #==========================================================================================================

    comment_id:
      name: idComment
      in: path
      description: the id of the comment that must to be deleted
      required: true
      schema:
        type: integer
        example: 358458
  
  
  
  
  
  
  
  
  
  
 #____________________________________________________________________________________________________________________________________  
  
  
  
  schemas:

    users:
      type: object
      properties:
        id:
          description: The id of the user
          type: integer
          example: 26
        username:
          description: String between 3-16 characters
          type: string
          pattern: '^[a-zA-Z0-9]+$'
          example: "CiaoBello"
          minLength: 3
          maxLength: 16
          readOnly: true
  #==========================================================================================================

    photos:
      type: object
      properties:
        id:
          description: the id of the photo
          type: integer
          format: int64
          example: 1524
        date:
          description: the date when the photo was uploaded 
          type: string
          format: date-time
          example: "2024-04-02T12:00:00Z"
        owner:
          $ref: '#/components/schemas/users' 
        likes:
          type: integer
          example: 124
          description: Number of likes on a photo
        comments:
          type: integer
          example: 23
          description: the number of comments
        image:
          $ref: '#/components/schemas/raw_photo' 
#==========================================================================================================

    raw_photo:
      description: the raw file of the photo
      type: string
      format: binary
      example: "00110011110"
      minLength: 0
      maxLength: 1500      
#==========================================================================================================

    photo_comment:
      type: string
      description: the comment
      example: "Questa foto e´ bellissima"
      minLength: 1
      maxLength: 1500  
#==========================================================================================================

    UserProfile:
      type: object
      properties:
        User:
          $ref: '#/components/schemas/users' 
        followers:
          type: array
          minItems: 0
          maxItems: 99
          items:
                $ref: '#/components/schemas/users'

        following:
          type: array
          minItems: 0
          maxItems: 99
          items:
                $ref: '#/components/schemas/users'
        photos:
          type: array
          minItems: 0
          maxItems: 10
          items:
            $ref: '#/components/schemas/photos'
#==========================================================================================================

    stream:
      description: the stream that the user get on the homepage
      type: string
      format: binary
      example: "0100001"
      minLength: 30
      maxLength: 1500
      

 
 
 
 #____________________________________________________________________________________________________________________________________   
 
 
 
  responses:
  
    success:
      description: Response associated to the 200 http status. Operation successed
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Operazione effettuata con successo"
  
    no_content:
      description: Response associated to the 204 http status (No content to send for this reques)
    
    partial_content:
      description: Response associated to the 206 http status (The requested resource has partial info)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserProfile"
    
    Unauthorized:
      description: Response associated to the 401 Unauthorized request 
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Non sei autorizzato ad accedere a questa risorsa."
            
    Forbidden:
      description: Response associated to the 403 Forbidden request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Non hai i permessi necessari per accedere a questa risorsa."
    Not_Found:
      description: Response associated to the 404 Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "La risorsa richiesta non è stata trovata."

    Invalid_ID_supplied:
        description: Response associated to the 400 Invalid ID supplied
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier: 
                  type: string
                  example: "abcdef012345"
    
    Unprocessable_Entity:
      description: Response associated to the 422 Unprocessable Entity
      content:
       application/json:
        schema:
          type: object
          properties:
            message:
              type: string
              example: "La richiesta non può essere elaborata a causa di dati non validi."
            errors:
              type: array
              items:
                type: string
                example: ["Campo 'email' non può essere vuoto.", "Campo 'password' deve essere di almeno 8 caratteri."]
      
    Internal_Server_Error:
      description: Response associated to the 500 Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Si è verificato un errore interno del server."
              error_code:
                type: string
                example: "SERVER_ERROR_500"


        
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
        
        
        
        
        
