
openapi: 3.0.3
info:
  title: WASA Sapienza API
  description: |
    This is the API for the WASA Homework 1 by 1967862.
  version: 0.0.1
servers:
  - url: http://127.0.0.1:3000



tags:
  - name: "login"
    description: Endpoint that manages the login
  - name: "search"
    description: Endpoint that manages search
  - name: "user"
    description: Endpoint that manages users
  - name: "ban"
    description: Endpoint that manages banned users
  - name: "followers"
    description: Endpoint that manages followers
  - name: "stream"
    description: Endpoint that manages stream
  - name: "photo"
    description: Endpoint that manages photos
  - name: "comments"
    description: Endpoint that manages comments
  - name: "likes"
    description: Endpoint that manages likes
#=====================================================================================
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_login"

        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/login_return"
  #=====================================================================================
  /users:

    parameters:
      - $ref: "#/components/parameters/query_nickname"

    get:
      tags:
        - search
      summary: Gets the profile of the user with a certain nickname
      description: A user can find another user's profile only if he's not banned by the latter. Multiple users might match partially the nickname being searched
      operationId: getUserProfile


      responses:
        '200':
          $ref: "#/components/responses/user_found"
        '401':
          $ref: "#/components/responses/unauthorized"
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []
  #=====================================================================================
  /users/{id}:

    parameters:
      - $ref: "#/components/parameters/user_id"

    get:
      tags:
        - user
      summary: Obtain the profile
      description: Allows the user to obtain a profile complete info (can't be banned by the profile owner)
      operationId: getProfile

      responses:
        '200':
          $ref: "#/components/responses/profile"
        '206':
          $ref: "#/components/responses/partial_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []

    put:
      tags:
        - user
      summary: Set a new nickname
      description: Allows the user to modify his own nickname
      operationId: setMyUserName

      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_nickname"
            example:
              nickname: "Currywurst78"
        required: true

      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []
  #=====================================================================================
  /users/{id}/banned_users/{banned_user_id}:
    parameters:
      - $ref: '#/components/parameters/user_id'
      - $ref: "#/components/parameters/banned_user_id"

    put:
      tags:
        - ban
      summary: Bans a user
      description: Once a user is blocked he/she won't be able to see anything from whoever banned him/her. That includes comments,likes, photos and the profile of the banning user. Banning multiple times is equivalent to banning a user once
      operationId: banUser

      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []

    delete:
      tags:
        - ban
      summary: Unbans a user
      description: By removing the ban the unbanned user can see the posts,comments and likes of the user that unbanned him/her
      operationId: unbanUser

      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []
  #=====================================================================================
  /users/{id}/followers/{follower_id}:
    parameters:
      - $ref: "#/components/parameters/user_id"
      - $ref: '#/components/parameters/follower_id'

    put:
      tags:
        - followers
      summary: Follows a user
      description: |
        Allows a user (if he's logged in) to follow another user only if the latter didn't ban him. A user can't follow himself and can't follow a user he already follows. Once a user follows another one then his list of "Following" will be updated too
      operationId: followUser

      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []

    delete:
      tags:
        - followers
      summary: Unfollows a certain user
      description: |
        A user can decide to unfollow another one.
      operationId: unfollowUser

      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []
  #=====================================================================================
  /users/{id}/home:
    parameters:
      - $ref: '#/components/parameters/user_id'

    get:
      tags:
        - stream
      summary: Obtain the stream
      description: Get all the photos (stream) from the following users
      operationId: getMyStream

      responses:
        '200':
          $ref: "#/components/responses/stream"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []
  #=====================================================================================
  /users/{id}/photos:
    parameters:
      - $ref: '#/components/parameters/user_id'

    post:
      tags:
        - photo
      summary: Upload a photo
      description: A user can upload one or multiple images on his/her profile
      operationId: uploadPhoto
      requestBody:
        content:
          image/*:
            schema:
              $ref: "#/components/schemas/raw_photo"
            example:
              photo_data: "010110010"
        required: true

      responses:
        '201':
          $ref: "#/components/responses/photo_uploaded"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []
  #=====================================================================================
  /users/{id}/photos/{photo_id}:
    parameters:
      - $ref: '#/components/parameters/user_id'
      - $ref: '#/components/parameters/photo_id'


    get:
      tags:
        - photo
      summary: Downloads a photo
      description: A user can access a photo if he/she's the owner or if he/she wasn't banned by the owner
      operationId: getPhoto

      responses:
        '200':
          $ref: "#/components/responses/photo"
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []

    delete:
      tags:
        - photo
      summary: Deletes a photo
      description: Deletes a user's photo with relative comments and likes
      operationId: deletePhoto

      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []
  #=====================================================================================
  /users/{id}/photos/{photo_id}/comments:
    parameters:
      - $ref: '#/components/parameters/user_id'
      - $ref: '#/components/parameters/photo_id'

    post:
      tags:
        - comments
      summary: Add a comment to a photo
      description: Adds a comment to a user's photo. Multiple comments can be made. Owners can comment their own photo
      operationId: commentPhoto

      requestBody:
        description: Contains the id of who's commenting and the relative comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment'
        required: true

      responses:
        '201':
          $ref: '#/components/responses/comment_added'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []
  #=====================================================================================
  /users/{id}/photos/{photo_id}/comments/{comment_id}:
    parameters:
      - $ref: '#/components/parameters/user_id'
      - $ref: '#/components/parameters/photo_id'
      - $ref: '#/components/parameters/comment_id'

    delete:
      tags:
        - comments
      summary: Remove a comment from a photo
      description: Removes a comment from a user's photo. Only the owner of the photo can remove comments
      operationId: uncommentPhoto

      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []
  #=====================================================================================
  /users/{id}/photos/{photo_id}/likes/{like_id}:
    parameters:
      - $ref: '#/components/parameters/user_id'
      - $ref: '#/components/parameters/photo_id'
      - $ref: '#/components/parameters/like_id'


    put:
      tags:
        - likes
      summary: Add a like to a photo
      description: Adds a like to a user's photo. A user can only like a photo once (multiple likes count as one). Owners can't like their own photos
      operationId: likePhoto

      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []

    delete:
      tags:
        - likes
      summary: Remove a like from a photo
      description: Removes a like from a user's photo
      operationId: unlikePhoto

      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"

      security:
        - bearerAuth: []
#=====================================================================================
#_____________________________________________________________________________________________________
components:

  parameters:

    nickname:
      name: nickname
      in: path
      description: A user's unique nickname
      required: true
      schema:
        $ref: "#/components/schemas/user_nickname/properties/nickname"
      example: "Fefo"
    #........................................................


    user_id:
      name: id
      in: path
      description: A user's unique id
      required: true
      schema:
        $ref: "#/components/schemas/identifier"
      example: 123
    #........................................................


    photo_id:
      name: photo_id
      in: path
      description: A photo unique *identifier
      required: true
      schema:
        $ref: "#/components/schemas/identifier"
      example: 145
    #........................................................
    comment_id:
      name: comment_id
      in: path
      description: A comment unique *identifier
      required: true
      schema:
        $ref: "#/components/schemas/identifier"
      example: 118
    #........................................................
    follower_id:
      name: follower_id
      in: path
      description: A follower's unique identifier. It's exactly his *identifier
      required: true
      schema:
        $ref: "#/components/schemas/identifier"
      example: 174
    #........................................................
    like_id:
      name: like_id
      in: path
      description: A like unique identifier. It's exactly the *identifier of the user that liked the photo
      required: true
      schema:
        $ref: "#/components/schemas/identifier"
      example: 178
    #........................................................
    banned_user_id:
      name: banned_user_id
      in: path
      description: A banned user unique identifier. It's exactly the *identifier of the user
      required: true
      schema:
        $ref: "#/components/schemas/identifier"
      example: 137
    #........................................................
    query_nickname:
      name: nickname
      in: query
      description: nichkname of the user that is being searched
      schema:
        $ref: "#/components/schemas/user_nickname/properties/nickname"
      example: "Fefo"
  #........................................................
  #_____________________________________________________________________________________________________
  schemas:

    user_nickname:
      description: It's a user's nickname
      type: object
      properties:
        nickname:
          description: Any string between 3-16 characters
          type: string
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
          example: "BigMama"
      example:
        nickname: "Kaido"
    #||||||||||||||||||||||||||||||||||||||||||||||||||||||||

    identifier:
      description: It's a *unique* id
      type: integer
      format: int
      minimum: 100
      maximum: 9999
      readOnly: true
      example: 965

    #||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    complete_user:
      description: Contains both *unique identifier and nickname of a user
      type: object
      properties:
        user_id:
          $ref: "#/components/schemas/identifier"
        nickname:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
      example:
        user_id: 270
        nickname: "Luffy"
    #||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    comment:
      description: A user's comment contains the text of the comment
      type: object
      properties:
        comment:
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^.*?$'
          example: "OK my bruh"
          description: String value of the comment
      example:
        comment: "Che tramonto!"
    #||||||||||||||||||||||||||||||||||||||||||||||||||||||||

    complete_comment:
      description: Contains *unique identifier of a comment and the comment
      type: object
      properties:
        id:
          $ref: "#/components/schemas/identifier"
        comment:
          $ref: "#/components/schemas/comment/properties/comment"
      example:
        user_id: 270
        nickname: "Luffy"
        #||||||||||||||||||||||||||||||||||||||||||||||||||||
    raw_photo:
      description: Image content
      type: object
      properties:
        photo_data:
          description: "Raw data of the photo"
          type: string
          format: binary
          minLength: 0
          maxLength: 100
          example: "011100010011111100"
      example:
        photo_data: "010110010"
    #||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    photo:
      description: Contains the essential info of a photo
      type: object
      properties:

        photo_id:
          $ref: "#/components/schemas/identifier"
        owner:
          $ref: "#/components/schemas/complete_user"
        comments:
          description: Array of comments of a photo
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: "#/components/schemas/complete_comment"
          example:
            - id: 545
              comment: "bella foto!"
            - id: 742
              comment: "How are you?"
        likes:
          description:  Array of users that liked a photo
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: "#/components/schemas/complete_user"
          example:
            -  user_id: 154
               nickname: "Kaido"
            -  user_id: 847
               nickname: "Luccy"
        date:
          description: Date and time of upload.
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
          readOnly: true
        raw_data:
          $ref: "#/components/schemas/raw_photo/properties/photo_data"

      example:
        photo_id: 247
        owner:
          user_id: 781
          nickname: "GattoSuperbo"
        comments:
          - id: 125
            comment: "Bellissima foto amico mio"
        likes:
          - user_id: 452
            nickname: "Doflamingo"
        date: 2017-07-21T17:32:28Z
        raw_data: "1100011100"

    #||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    photos:
      description: Represents a list of photos
      type: object
      properties:
        photos_list:
          description: List of photos
          type: array
          minItems: 0
          maxItems: 10
          items:
            $ref: "#/components/schemas/photo"
          example:
            - photo_id: 8321
              owner:
                user_id: 123
                nickname: "Corichetto"
              comments:
                - id: 700
                  user_id: 480
                  nickname: "Niko Robin"
                  comment: "i love you"
                - id: 760
                  user_id: 182
                  nickname: "Zoro"
                  comment: "great goal!"
              likes:
                - user_id: 756
                  nickname: "Franky99"
                - user_id: 780
                  nickname: "BabyReeinder"
              date: 2017-07-21T17:32:28Z
              raw_data: "1100011100"
            - photo_id:  8322
              owner:
                - user_id: 124
                  nickname: "TonyMontana"
              comments:
                - id: 770
                  comment: "nice shot!"
              likes:
                - user_id: 123
                  nickname: "Sanji"
              date: 2018-08-22T15:21:22Z
              raw_data: "1100011111"
    #||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    users_list:
      description: List of users found
      type: object
      properties:
        users:
          description: Array of users with a partial match on the searched nickname
          type: array
          minItems: 0
          maxItems: 10
          items:
            $ref: "#/components/schemas/complete_user"
          example:
            - user_id: 340
              nickname: Marietto
            - user_id: 320
              nickname: Karrot
            - user_id: 131
              nickname: Sayan
            - user_id: 178
              nickname: GokuSS4
    #||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    complete_profile:
      description: Object containing all the profile info
      type: object
      properties:

        user:
          $ref: "#/components/schemas/complete_user"

        followers:
          description: Array of followers
          type: array
          minItems: 0
          maxItems: 99
          items:
            $ref: "#/components/schemas/complete_user"
          example:
            - user_id: 451
              nickname: "Usoppp"
            - user_id: 827
              nickname: "Cecchino74"

        following:
          description: Array of followed users
          type: array
          minItems: 0
          maxItems: 99
          items:
            $ref: "#/components/schemas/complete_user"
          example:
            - user_id: 741
              nickname: "Carpentiere22"

        photos:
          description: Array of photos
          type: array
          minItems: 0
          maxItems: 10
          items:
            $ref: "#/components/schemas/photo"
          example:
            - comments:
                - user_id: 451
                  nickname: "stivali"
                  comment: "special"
                  comment_id: 104
                - user_id: 153
                  nickname: "ontas"
                  comment: "wow!"
                  comment_id: 990
            - likes:
                - user_id: 512
                  nickname: "marcio"
                - user_id: 632
                  nickname: "fibra"
                - user_id: 852
                  nickname: "ohneFlamingo"

              date: 2022-11-22T13:10:14Z
              photo_id: 7836
            - owner:
                user_id: 781
                nickname: "Franchino"
    #||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    user_login:
      description: Identifier sent by user during the login
      type: object
      properties:
        nickname:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
    #||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    login_return:
      description: Identifier returned after the login
      type: object
      properties:
        identifier:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
  #||||||||||||||||||||||||||||||||||||||||||||||||||||||||
  #_____________________________________________________________________________________________________
  responses:
    #''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    no_content:
      description: Response associated to the 204 http status (No content to send for this reques)
    #''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    partial_content:
      description: Response associated to the 206 http status (The requested resource has partial info)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/complete_profile"
    #''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    unauthorized:
      description:  Response associated to the 401 http status (Access token is missing. User is not logged in)
    #''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    forbidden:
      description: Response associated to the 403 http status (Access denied )
    #''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    not_found:
      description: Response associated to the 404 http status (The requested resource doesn't exist)
    #''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    internal_server_error:
      description: Response associated to the 500 http status (Server has encountered an unknown error)
    #''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    user_found:
      description: There's a match for the given identifier/nickname. User/users found successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/users_list"
    #''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    stream:
      description: Contains a list of photos from following users in a reversed chronological order
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/photos"
    #''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    comment_added:
      description: Comment has been added successfully. Returns the comment *unique* identifier
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/complete_comment"
    #''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    photo_uploaded:
      description: photo has been uploaded successfully. Returns the posted photo
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/photo"
    #''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    profile:
      description: All the info of a profile
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/complete_profile"
    #''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    photo:
      description: The photo with all likes,comments exc.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/photo"
  #''''''''''''''''''''''''''''''''''''''''''''''''''''''''
  #_____________________________________________________________________________________________________
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
#_____________________________________________________________________________________________________
